name: Auto Update with Bun
on:
  workflow_call:
    inputs:
      commands:
        type: string
        required: false
        default: '["fmt", "typegen", "db:generate"]'
        description: |
          JSON 形式の実行するコマンドの配列 (e.g. '["fmt","typegen"]')

jobs:
  auto-update:
    name: Auto Update
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
      - uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Commands
        id: run-commands
        uses: actions/github-script@v8
        with:
          script: |
            const { execSync } = require('child_process');
            const commands = JSON.parse('${{ inputs.commands }}');

            console.log('📦 bun コマンドを実行中...');

            // Git設定
            execSync('git config --local user.email "github-actions[bot]@users.noreply.github.com"');
            execSync('git config --local user.name "github-actions[bot]"');

            // ブランチ名を生成
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').replace('T', '-').substring(0, 19);
            const branchName = `auto-update/bun-${timestamp}`;

            // 新しいブランチを作成
            execSync(`git checkout -b ${branchName}`);
            console.log(`📝 ブランチ作成: ${branchName}`);

            let totalChanges = false;

            // 各コマンドを実行してコミット
            for (const cmd of commands) {
              console.log(`\n🔧 実行中: bun run ${cmd}`);
              try {
                const output = execSync(`bun run ${cmd}`, {
                  encoding: 'utf-8',
                  stdio: 'pipe'
                });
                console.log(output);

                // このコマンドによる変更を確認
                const gitStatus = execSync('git status --porcelain', { encoding: 'utf-8' });
                if (gitStatus.trim().length > 0) {
                  // 変更をステージング
                  execSync('git add -A');

                  // コミット
                  const commitMessage = `chore: bun run ${cmd} による自動更新\n\nCo-authored-by: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>`;
                  execSync(`git commit -m "${commitMessage}"`);

                  console.log(`✅ コミット作成: ${cmd} による変更`);
                  totalChanges = true;
                } else {
                  console.log(`📭 ${cmd} による変更はありません`);
                }
              } catch (error) {
                console.error(`⚠️ コマンドが失敗しました: ${cmd}`);
                console.error(error.message);
                // エラーが発生しても他のコマンドは継続実行
              }
            }

            if (totalChanges) {
              console.log('\n✅ 合計で変更が検出されました');
              core.setOutput('changes', 'true');
              core.setOutput('branch', branchName);
            } else {
              console.log('\n📭 変更はありません');
              core.setOutput('changes', 'false');
            }

            return totalChanges;

      - name: Create Pull Request
        if: steps.run-commands.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # ブランチ名を取得
          BRANCH_NAME="${{ steps.run-commands.outputs.branch }}"

          # ブランチをプッシュ
          git push origin "$BRANCH_NAME"

          # PRを作成
          PR_URL=$(gh pr create \
            --title "chore: bun コマンドによる自動更新" \
            --body "## 概要
          このPRは以下のコマンドによる自動更新を含んでいます:
          - ${{ inputs.commands }}

          ## 変更内容
          各コマンドごとに個別のコミットが作成されています。

          ---
          *このPRはGitHub Actionsによって自動的に作成されました*

          Co-authored-by: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>" \
            --base "${{ github.head_ref || github.ref_name }}" \
            --head "$BRANCH_NAME")

          echo "✅ Pull Request が作成されました: $PR_URL"
          echo "::error::自動更新による変更が検出されました。作成されたPRをレビューしてください: $PR_URL"
          exit 1
