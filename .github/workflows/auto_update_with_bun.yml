name: Auto Update with Bun
on:
  workflow_call:
    inputs:
      commands:
        type: string
        required: false
        default: '["fmt", "typegen", "db:generate"]'
        description: |
          JSON 形式の実行するコマンドの配列 (e.g. '["fmt","typegen"]')

jobs:
  auto-update:
    name: Auto Update
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref || github.ref_name }}
      - uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - uses: actions/create-github-app-token@v2
        id: github-app-token
        with:
          app-id: ${{ secrets.NWU_BOT_APP_ID }}
          private-key: ${{ secrets.NWU_BOT_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }} # For creating a token for all repositories in the current owner's installation

      - name: Run Commands
        id: run-commands
        uses: actions/github-script@v8
        env:
          # デフォルトの github.token ではワークフローをトリガーできないため GitHub App Token を使用する
          GH_TOKEN: ${{ steps.github-app-token.outputs.token }}
        with:
          script: |
            const { execSync } = require('child_process');
            const branchName = process.env.GITHUB_HEAD_REF || process.env.GITHUB_REF_NAME;
            const repo = process.env.GITHUB_REPOSITORY;
            const token = process.env.GH_TOKEN;
            const commands = JSON.parse('${{ inputs.commands }}');

            console.log('📦 bun コマンドを実行中...');

            // Git設定
            execSync('git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"');
            execSync('git config --local user.name "github-actions[bot]"');

            let totalChanges = false;

            // 各コマンドを実行してコミット
            for (const cmd of commands) {
              console.log(`\n🔧 実行中: bun run ${cmd}`);
              try {
                const output = execSync(`bun run ${cmd}`, {
                  encoding: 'utf-8',
                  stdio: 'pipe'
                });
                console.log(output);

                // このコマンドによる変更を確認
                const gitStatus = execSync('git status --porcelain', { encoding: 'utf-8' });
                if (gitStatus.trim().length > 0) {
                  // 変更をステージング
                  execSync('git add -A');

                  // コミット
                  const commitMessage = `chore: bun run ${cmd} による自動更新\n\nCo-authored-by: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>`;
                  execSync(`git commit -m "${commitMessage}"`);

                  console.log(`✅ コミット作成: ${cmd} による変更`);
                  totalChanges = true;
                } else {
                  console.log(`📭 ${cmd} による変更はありません`);
                }
              } catch (error) {
                console.error(`⚠️ コマンドが失敗しました: ${cmd}`);
                console.error(error.message);
                // エラーが発生しても他のコマンドは継続実行
              }
            }

            // ループ外で残差分があれば最終コミット
            try {
              const residual = execSync('git status --porcelain', { encoding: 'utf-8' });
              if (residual.trim().length > 0) {
                console.log('\n🧹 残差分をコミットします');
                execSync('git add -A');
                execSync('git commit -m "chore: 自動更新の残差分をコミット"');
                totalChanges = true;
              }
            } catch (e) {
              console.error('残差分コミット処理でエラー:', e.message);
            }

            // 変更があれば push（GitHub App トークンを使用）
            if (totalChanges) {
              console.log('\n✅ 合計で変更が検出されました');
              const remoteUrl = `https://x-access-token:${token}@github.com/${repo}.git`;
              console.log(`🚀 push 実行: HEAD:${branchName}`);
              execSync(`git push "${remoteUrl}" "HEAD:${branchName}"`, { stdio: 'inherit' });
              core.setOutput('changes', 'true');
              core.setOutput('branch', branchName);
              core.setFailed('自動更新により差分が発生したため失敗として終了します');
            } else {
              console.log('\n📭 変更はありません');
              core.setOutput('changes', 'false');
            }

            return totalChanges;
