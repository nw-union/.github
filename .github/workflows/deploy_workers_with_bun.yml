name: Deploy Workers With Bun
on:
  workflow_call:
    inputs:
      command:
        type: string
        default: deploy

      envs:
        type: string
        required: false
        default: '["production"]'
        description: |
          json 形式のデプロイする環境の配列 (e.g. '["production","development"]')

      artifacts-upload-path:
        type: string
        required: false
        default: build/

      artifacts-download-path:
        type: string
        required: false
        default: build/
        description: |
          成果物をダウンロードするパス.
          upload-path が複数の時はその親ディレクトリを指定. $GITHUB_WORKSPACE など.

    secrets:
      CLOUDFLARE_ACCOUNT_ID:
        required: true
        description: |
          Cloudflare のアカウントID.
          Cloudflare ダッシュボード > Workers & Pages > Overview で,
          右側のサイドバーから確認可能.

      CLOUDFLARE_API_TOKEN:
        required: true
        description: |
          Cloudflare の API トークン.
          Cloudflare ダッシュボード > My Profile > API Tokens で作成.
          必要な権限(多分):
            - Account > Workers Scripts > Edit
            - Account > Workers KV Storage > Edit (KV を使う場合)
            - Zone > Workers Routes > Edit (カスタムドメインを使う場合)

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          include-hidden-files: true
          path: ${{ inputs.artifacts-upload-path }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        environment: ${{ fromJSON(inputs.envs) }}
    steps:
      - uses: actions/checkout@v5
      - uses: oven-sh/setup-bun@v2

      - name: Install dependencies # TODO: 無くしたい
        run: bun install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: ${{ inputs.artifacts-download-path }}

      - name: Deploy
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: ${{ inputs.command }} --env ${{ matrix.environment }}

      - name: Save deployment result
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const data = {
              environment: '${{ matrix.environment }}',
              status: '${{ steps.deploy.outcome }}',
              url: '${{ steps.deploy.outputs.deployment-url }}' || 'N/A'
            };
            fs.writeFileSync('result.json', JSON.stringify(data));

      - name: Upload deployment result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-result-${{ matrix.environment }}
          path: result.json

  result:
    name: Result
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Download deployment results
        uses: actions/download-artifact@v5
        with:
          pattern: deploy-result-*
          path: results

      - name: Generate deployment message
        id: message
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let message = '## 🚀 Deployment Results\n\n';
            message += '| Environment | Status | URL |\n';
            message += '| :---------- | :----- | :-- |\n';

            const dir = 'results';
            const files = fs.readdirSync(dir);

            files.forEach(file => {
              let filePath;
              const fullPath = path.join(dir, file);
              
              // ファイルかディレクトリかを判定
              if (fs.statSync(fullPath).isDirectory()) {
                // 複数環境の場合：results/deploy-result-env/result.json
                filePath = path.join(fullPath, 'result.json');
              } else {
                // 単一環境の場合：results/result.json
                filePath = fullPath;
              }
              
              const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
              const statusEmoji = data.status === 'success' ? '✅' : '❌';
              message += `| ${data.environment} | ${statusEmoji} ${data.status} | ${data.url} |\n`;
            });

            // 環境変数としてメッセージをエクスポート
            core.exportVariable('DEPLOY_MESSAGE', message);

      - name: Write Summary
        uses: actions/github-script@v8
        with:
          script: |
            const message = process.env.DEPLOY_MESSAGE || '';
            await core.summary.addRaw(message).write();

      - name: Comment on PR
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request' # PR の場合はコメントを残す
        with:
          script: |
            const message = process.env.DEPLOY_MESSAGE || '';
            const body = message +
              `\n*Pusher: @${{ github.actor }}, Commit: ${{ github.event.pull_request.head.sha }}* \n` +
              `\n<!-- deploy-workers-with-bun-results -->`;


            // 既存のコメントを探す
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('<!-- deploy-workers-with-bun-results -->')
            );

            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // 新規コメントを作成
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
